import logging
from enum import Enum
from typing import Any

from fastapi import APIRouter
from pydantic import BaseModel

from resume_editor.app.models.resume.certifications import Certification
from resume_editor.app.models.resume.education import Degree
from resume_editor.app.models.resume.experience import Project, Role

log = logging.getLogger(__name__)

router = APIRouter(prefix="/api/resumes", tags=["resumes"])


class DocxFormat(str, Enum):
    """Enum for DOCX export formats.

    Attributes:
        ATS (str): Format optimized for Applicant Tracking Systems.
        PLAIN (str): Standard plain text format.
        EXECUTIVE_SUMMARY (str): Executive-level format with enhanced styling.
    """

    ATS = "ats"
    PLAIN = "plain"
    EXECUTIVE_SUMMARY = "executive_summary"


# Request/Response models
class ParseRequest(BaseModel):
    """Request model for resume parsing.

    Attributes:
        markdown_content (str): The Markdown content of the resume to parse.

    Args:
        markdown_content (str): The raw Markdown text of the resume to be parsed into structured data.

    Returns:
        ParseRequest: An instance of the model containing the parsed Markdown content.

    Notes:
        1. The markdown_content is expected to be valid Markdown with resume-specific formatting.
        2. No external resources are accessed during parsing.
    """

    markdown_content: str


class ParseResponse(BaseModel):
    """Response model for resume parsing.

    Attributes:
        resume_data (dict[str, Any]): The structured resume data extracted from the Markdown content.

    Args:
        resume_data (dict[str, Any]): A dictionary containing the parsed resume data, such as personal info, education, experience, etc.

    Returns:
        ParseResponse: An instance of the model containing the structured resume data.

    Notes:
        1. The resume_data is generated by parsing the input Markdown content.
        2. No external resources are accessed during parsing.
    """

    resume_data: dict[str, Any]


class ResumeCreateRequest(BaseModel):
    """Request model for creating a new resume.

    Attributes:
        name (str): The name of the resume.
        content (str): The Markdown content of the resume.

    Args:
        name (str): The user-defined name for the new resume.
        content (str): The Markdown-formatted content of the resume.

    Returns:
        ResumeCreateRequest: An instance of the model with the provided name and content.

    Notes:
        1. The name must be unique within the user's resume collection.
        2. The content is stored as-is in the database.
        3. No external resources are accessed during creation.
    """

    name: str
    content: str


class ResumeUpdateRequest(BaseModel):
    """Request model for updating an existing resume.

    Attributes:
        name (str | None): The updated name of the resume, or None to keep unchanged.
        content (str | None): The updated Markdown content of the resume, or None to keep unchanged.

    Args:
        name (str | None): The new name for the resume, or None to retain the current name.
        content (str | None): The new Markdown content for the resume, or None to retain the current content.

    Returns:
        ResumeUpdateRequest: An instance of the model with the updated fields.

    Notes:
        1. Only the provided fields (name or content) are updated; others remain unchanged.
        2. No external resources are accessed during update.
    """

    name: str | None = None
    content: str | None = None


class ResumeResponse(BaseModel):
    """Response model for a resume.

    Attributes:
        id (int): The unique identifier for the resume.
        name (str): The name of the resume.

    Args:
        id (int): The unique database ID assigned to the resume.
        name (str): The name of the resume as provided by the user.

    Returns:
        ResumeResponse: An instance of the model containing the resume ID and name.

    Notes:
        1. The ID is assigned by the database upon creation.
        2. No external resources are accessed during response construction.
    """

    id: int
    name: str


class ResumeDetailResponse(BaseModel):
    """Response model for detailed resume content.

    Attributes:
        id (int): The unique identifier for the resume.
        name (str): The name of the resume.
        content (str): The Markdown content of the resume.

    Args:
        id (int): The unique database ID assigned to the resume.
        name (str): The name of the resume.
        content (str): The full Markdown content of the resume.

    Returns:
        ResumeDetailResponse: An instance of the model containing the resume ID, name, and content.

    Notes:
        1. The content is retrieved from the database.
        2. Database access is required to fetch the full resume content.
    """

    id: int
    name: str
    content: str


class PersonalInfoUpdateRequest(BaseModel):
    """Request model for updating personal information.

    Attributes:
        name (str): The full name.
        email (str | None): The email address.
        phone (str | None): The phone number.
        location (str | None): The location.
        website (str | None): The website URL.
        github (str | None): The GitHub profile URL.
        linkedin (str | None): The LinkedIn profile URL.
        twitter (str | None): The Twitter profile URL.
        work_authorization (str | None): The work authorization status.
        require_sponsorship (bool | None): Whether sponsorship is required.
        banner (str | None): The personal banner.
        note (str | None): A personal note.

    Args:
        name (str): The full name of the individual.
        email (str | None): The email address, or None if not provided.
        phone (str | None): The phone number, or None if not provided.
        location (str | None): The geographic location, or None if not provided.
        website (str | None): The personal website URL, or None if not provided.
        github (str | None): The GitHub profile URL, or None if not provided.
        linkedin (str | None): The LinkedIn profile URL, or None if not provided.
        twitter (str | None): The Twitter profile URL, or None if not provided.
        work_authorization (str | None): The work authorization status, or None if not provided.
        require_sponsorship (bool | None): Whether the individual requires sponsorship, or None if not provided.
        banner (str | None): A custom banner image or text, or None if not provided.
        note (str | None): A personal note, or None if not provided.

    Returns:
        PersonalInfoUpdateRequest: An instance of the model with the provided personal information.

    Notes:
        1. Only the provided fields are updated; others remain unchanged.
        2. No external resources are accessed during update.
    """

    name: str
    email: str | None = None
    phone: str | None = None
    location: str | None = None
    website: str | None = None
    github: str | None = None
    linkedin: str | None = None
    twitter: str | None = None
    work_authorization: str | None = None
    require_sponsorship: bool | None = None
    banner: str | None = None
    note: str | None = None


class EducationUpdateRequest(BaseModel):
    """Request model for updating education information.

    Attributes:
        degrees (list[Degree]): List of degrees with their details.

    Args:
        degrees (list[Degree]): A list of Degree objects containing academic details.

    Returns:
        EducationUpdateRequest: An instance of the model with the provided list of degrees.

    Notes:
        1. The degrees list replaces the existing education data.
        2. No external resources are accessed during update.
    """

    degrees: list[Degree]


class ExperienceUpdateRequest(BaseModel):
    """Request model for updating experience information.

    Attributes:
        roles (list[Role] | None): List of roles with their details.
        projects (list[Project] | None): List of projects with their details.

    Args:
        roles (list[Role] | None): A list of Role objects describing professional roles, or None to keep unchanged.
        projects (list[Project] | None): A list of Project objects describing projects, or None to keep unchanged.

    Returns:
        ExperienceUpdateRequest: An instance of the model with the provided roles and projects.

    Notes:
        1. Only the provided fields (roles or projects) are updated; others remain unchanged.
        2. No external resources are accessed during update.
    """

    roles: list[Role] | None = None
    projects: list[Project] | None = None


class CertificationUpdateRequest(BaseModel):
    """Request model for updating certification information.

    Attributes:
        certifications (list[Certification]): List of certifications with their details.

    Args:
        certifications (list[Certification]): A list of Certification objects containing certification details.

    Returns:
        CertificationUpdateRequest: An instance of the model with the provided list of certifications.

    Notes:
        1. The certifications list replaces the existing certifications data.
        2. No external resources are accessed during update.
    """

    certifications: list[Certification]


class RefineTargetSection(str, Enum):
    """Enum for target sections for LLM refinement.

    Attributes:
        FULL (str): Refine the entire resume.
        PERSONAL (str): Refine only the personal information section.
        EDUCATION (str): Refine only the education section.
        EXPERIENCE (str): Refine only the experience section.
        CERTIFICATIONS (str): Refine only the certifications section.
    """

    FULL = "full"
    PERSONAL = "personal"
    EDUCATION = "education"
    EXPERIENCE = "experience"
    CERTIFICATIONS = "certifications"


class RefineRequest(BaseModel):
    """Request model for refining resume content.

    Attributes:
        job_description (str): The job description to align the resume with.
        target_section (RefineTargetSection): The section of the resume to refine.

    Args:
        job_description (str): The full text of the job description to use as a reference for refinement.
        target_section (RefineTargetSection): The specific section of the resume to refine.

    Returns:
        RefineRequest: An instance of the model with the job description and target section.

    Notes:
        1. The LLM uses the job description to generate improved content for the specified section.
        2. Network access is required to call the LLM service.
    """

    job_description: str
    target_section: RefineTargetSection


class RefineResponse(BaseModel):
    """Response model for refined resume content.

    Attributes:
        refined_content (str): The LLM-refined resume content in Markdown format.

    Args:
        refined_content (str): The updated Markdown content of the resume section after refinement.

    Returns:
        RefineResponse: An instance of the model containing the refined content.

    Notes:
        1. The refined_content is generated by the LLM based on the job description and target section.
        2. Network access is required to call the LLM service.
    """

    refined_content: str


class RefineAction(str, Enum):
    """Enum for actions after accepting LLM refinement.

    Attributes:
        OVERWRITE (str): Replace the original content with the refined version.
        SAVE_AS_NEW (str): Save the refined content as a new resume.
    """

    OVERWRITE = "overwrite"
    SAVE_AS_NEW = "save_as_new"


class RefineAcceptRequest(BaseModel):
    """Request model for accepting a refined resume section.

    This model can be populated from form data.

    Attributes:
        refined_content (str): The markdown content of the refined section.
        target_section (RefineTargetSection): The section that was refined.
        action (RefineAction): The action to take (overwrite or save as new).
        new_resume_name (str | None): The name for the new resume if action is 'save_as_new'.
        job_description (str | None): The job description associated with the refinement.

    Args:
        refined_content (str): The Markdown content of the refined resume section.
        target_section (RefineTargetSection): The section that was refined.
        action (RefineAction): The action to perform after refinement.
        new_resume_name (str | None): The name for the new resume if action is 'save_as_new'.
        job_description (str | None): The job description associated with the refinement, used when saving as new.

    Returns:
        RefineAcceptRequest: An instance of the model with the refined content, target section, action, and optional new name.

    Notes:
        1. If action is OVERWRITE, the original resume is updated.
        2. If action is SAVE_AS_NEW, a new resume is created with the refined content.
        3. Database access is required to save or update the resume.
    """

    refined_content: str
    target_section: RefineTargetSection
    action: RefineAction
    new_resume_name: str | None = None
    job_description: str | None = None


# Response models for structured data
class PersonalInfoResponse(BaseModel):
    """Response model for personal information.

    Attributes:
        name (str | None): The full name.
        email (str | None): The email address.
        phone (str | None): The phone number.
        location (str | None): The location.
        website (str | None): The website URL.
        github (str | None): The GitHub profile URL.
        linkedin (str | None): The LinkedIn profile URL.
        twitter (str | None): The Twitter profile URL.
        work_authorization (str | None): The work authorization status.
        require_sponsorship (bool | None): Whether sponsorship is required.
        banner (str | None): The personal banner.
        note (str | None): A personal note.

    Args:
        name (str | None): The full name of the individual.
        email (str | None): The email address.
        phone (str | None): The phone number.
        location (str | None): The geographic location.
        website (str | None): The personal website URL.
        github (str | None): The GitHub profile URL.
        linkedin (str | None): The LinkedIn profile URL.
        twitter (str | None): The Twitter profile URL.
        work_authorization (str | None): The work authorization status.
        require_sponsorship (bool | None): Whether sponsorship is required.
        banner (str | None): A custom banner image or text.
        note (str | None): A personal note.

    Returns:
        PersonalInfoResponse: An instance of the model with the personal information.

    Notes:
        1. The data is retrieved from the database.
        2. Database access is required to fetch the personal information.
    """

    name: str | None = None
    email: str | None = None
    phone: str | None = None
    location: str | None = None
    website: str | None = None
    github: str | None = None
    linkedin: str | None = None
    twitter: str | None = None
    work_authorization: str | None = None
    require_sponsorship: bool | None = None
    banner: str | None = None
    note: str | None = None


class EducationResponse(BaseModel):
    """Response model for education information.

    Attributes:
        degrees (list[Degree]): List of degrees with their details.

    Args:
        degrees (list[Degree]): A list of Degree objects containing academic details.

    Returns:
        EducationResponse: An instance of the model with the list of degrees.

    Notes:
        1. The degrees are retrieved from the database.
        2. Database access is required to fetch the education data.
    """

    degrees: list[Degree]


class ExperienceResponse(BaseModel):
    """Response model for experience information.

    Attributes:
        roles (list[Role]): List of roles with their details.
        projects (list[Project]): List of projects with their details.

    Args:
        roles (list[Role]): A list of Role objects describing professional roles.
        projects (list[Project]): A list of Project objects describing projects.

    Returns:
        ExperienceResponse: An instance of the model with the roles and projects.

    Notes:
        1. The roles and projects are retrieved from the database.
        2. Database access is required to fetch the experience data.
    """

    roles: list[Role] = []
    projects: list[Project] = []


class ProjectsResponse(BaseModel):
    """Response model for projects information.

    Attributes:
        projects (list[Project]): List of projects with their details.

    Args:
        projects (list[Project]): A list of Project objects describing projects.

    Returns:
        ProjectsResponse: An instance of the model with the list of projects.

    Notes:
        1. The projects are retrieved from the database.
        2. Database access is required to fetch the projects data.
    """

    projects: list[Project]


class CertificationsResponse(BaseModel):
    """Response model for certifications information.

    Attributes:
        certifications (list[Certification]): List of certifications with their details.

    Args:
        certifications (list[Certification]): A list of Certification objects containing certification details.

    Returns:
        CertificationsResponse: An instance of the model with the list of certifications.

    Notes:
        1. The certifications are retrieved from the database.
        2. Database access is required to fetch the certifications data.
    """

    certifications: list[Certification]
